1) Multi-AZ - In this question, we consider a disaster to be an entire Availability Zone going down. In which case Multi-AZ will help. If we want to plan against an entire region going down, backups and replication across regions would help.
2) RDS Multi AZ - Be very careful with the way you read questions at the exam. Here, the question is asking which solution is NOT adapted to this problem. ElastiCache and RDS Read Replicas do indeed help with scaling reads.
3) RR will have asynchronous 
4) Multi AZ - Multi AZ keeps the same connection string regardless of which database is up. Read Replicas imply we need to reference them individually in our application as each read replica will have its own DNS name
5) Multi AZ ensures high availability
6) Storing Session Data in ElastiCache is a common pattern to ensuring different instances can retrieve your user's state if needed.
7) Read Replicas will help as our analytics application can now perform queries against it, and these queries won't impact the main production database.
8) Postgress
9) Oracel
10) Auror Global Database - Global Databases allow you to have cross region replication
11) Use Redis Auth
12) Create a RR in same AZ and run the analytics workload on the replica database - this will minimize cost because the data won't have to move across AZ
13) Create RR in the different region and enable multi AZ on the main DB
14) Use PostgreSQL for RDS and authenticate using a token obtained through the RDS Instance
15) Use Aurora Serverless
16) RDS 
17) ElastiCache - can create a Redis cache or a Memcached cache
18) Aurora
19) Neptune - This is AWS' managed graph database
20) You would like to store big objects of 100 MB into a reliable and durable Key Value store. What do you recommend? 
21) S3
22) Redshift
23) Ahtena
24) Elastic Search - Anytime you see "search", think ElasticSearch